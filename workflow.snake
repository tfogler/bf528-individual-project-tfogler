import pandas

sample_csv = pandas.read_csv('sample_info.csv', index_col='name')
CONDITIONS = set(sample_csv['condition'].tolist())
REPS = set(sample_csv['replicate'].tolist())
READS = set(sample_csv['read'].tolist())

rule all:
	input:
		expand('results/{condition}{rep}_{read}_fastqc.html',
		 condition = CONDITIONS,
		 rep = REPS,
		 read = READS
		),
		'results/multiqc_report.html',
		expand("results/{condition}_{rep}.aligned.bam", condition=CONDITIONS, rep=REPS),
		expand("results/{condition}_{rep}_flagstats.txt", condition=CONDITIONS, rep=REPS)

	
rule fastqc:
	input:
		'materials/{condition}rep{rep}_{read}.fastq.gz'
	output:
		'results/{condition}rep{rep}_{read}_fastqc.html'
	params:
		outdir = 'results/'
	threads: 4
	conda:
		'envs/fastqc_env.yml'
	shell:
		'''
		fastqc {input} -o {params.outdir}
		'''

rule multiqc:
	input:
		html=expand('results/{condition}{rep}_{read}_fastqc.html', 
		condition=CONDITIONS,
		rep=REPS,
		read=READS
		),
		zip=expand('results/{condition}{rep}_{read}_fastqc.zip', 
		condition=CONDITIONS,
		rep=REPS,
		read=READS
		)
	output:
		multiqc = 'results/multiqc_report.html'
	params:
		outdir = 'results/'
	conda:
		'envs/multiqc_env.yml'
	shell:
		'''
		multiqc results/ -o {params.outdir}
		'''

# Rule to download GRCh38 genome
rule get_GRCh38:
	output:
		"materials/GRCh38.fa.gz"
	shell:
		'''
		wget -O {output} https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_45/GRCh38.primary_assembly.genome.fa.gz
		'''

# we wan to sort the alignments from bowtie2_align
rule samtools_sort:
	input:
		'results/{condition}_{rep}.bam'
	output:
		'results/{condition}_{rep}.aligned.bam'
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools sort {input} -o {output}
		rm {input}
		'''

# Define the rule for building HISAT2 index from the human genome FASTA file
rule build_hisat_index:
	input:
		fasta = 'materials/GRCh38.fa'  # Path to human genome FASTA file
	output:
		hisat_index = "results/GRCh38_hs2"  # Output path for the HISAT2 index
	conda:
		'envs/hisat2_env.yml'
	threads: 16
	shell:
		'''
		hisat2-build {input.fasta} {output.hisat_index}
		'''

# Define the rule for aligning paired-end FASTQ files to the HISAT2 index
rule align_reads:
	input:
		index_prefix = "results/GRCh38_hs2",  # Prefix of the HISAT2 index
		fastq1='materials/{condition}rep{rep}_R1.fastq.gz', # Path to fwd reads
		fastq2='materials/{condition}rep{rep}_R2.fastq.gz' # Path to rvs reads
	output:
		bam_file = "results/{condition}_rep{rep}.bam"  # Output path for the aligned BAM file
	conda:
		'envs/hisat2_env.yml'
	threads: 16
	shell:
		'''
		hisat2 -x {input.index_prefix} \
			   -1 {input.fastq1} \
			   -2 {input.fastq2} \
		| samtools view -b > {output.bam_file}
		'''

# Rule to generate flagstat from aligned BAM files using samtools
rule samtools_flagstat:
	input:
		bam="results/{condition}_{rep}.aligned.bam"
	output:
		flagstat="results/{condition}_{rep}_flagstats.txt"
	conda:
		'envs/samtools_env.yml'
	shell:
		"samtools flagstat {input.bam} > {output.flagstat}"
